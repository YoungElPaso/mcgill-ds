// McGill Design System.
// fonts.scss
// This file specifies the custom fonts that are officially provided by the MDS.
//
// Local variables:
// * asset-path-font
// * highlight-color
//// TODO: some modules should have variables that can be loaded into the module scope using the @use with() syntax. We need a way to expose those or at least list at the top of each module file, like here.


// TODO: ~config: defaults - shove all into that~, ~font-path get rid off in settings, belongs here in fonts~, ~and add palette map for colors~. Also should have a 'required' module that can't be changed (ie. for branding).

@use 'vars-spacing' as space;

// Load common utilities module, hoist into universal namespace.
@use 'common-functions' as *;


// Load configuration module to get important variables.
@use 'config';

// Set variable for path to fonts.
$asset-path: config.get(asset-path);
$asset-path-font: '#{$asset-path}fonts';

// Set highlight color for headers.
// Load the palette from config & load the color from the theme and the palette.
// example: $header-color: getPaletteColor(config.get(palette), config.get(default-palette), 'accent');

// Currently used variants of the McGill custom fonts.
// TODO: modules should not directly write CSS! The following font-face declarations should be in a component that *should* be loaded with any component that requires these fonts. Or, conversely, this is fine and every component that depends on these font face should also include them? Problem is that CSS doesn't have a dependency mechanism - although that's also a strength. Also to NB: Parcel and other bundlers *will* de-dupe!
@font-face {
  font-family: 'McGillSans-Regular';
  src: url('#{$asset-path-font}/McGillSans-Regular.eot');
  src: url('#{$asset-path-font}/McGillSans-Regular.eot?#iefix') format('embedded-opentype'),
  url('#{$asset-path-font}/McGillSans-Regular.woff') format('woff'),
  url('#{$asset-path-font}/McGillSans-Regular.ttf') format('truetype');
  font-weight: normal;
  font-style: normal;
}

@font-face {
  font-family: 'McGillSans-Medium';
  src: url('#{$asset-path-font}/McGillSans-Medium.eot');
  src: url('#{$asset-path-font}/McGillSans-Medium.eot?#iefix') format('embedded-opentype'),
  url('#{$asset-path-font}/McGillSans-Medium.woff') format('woff'),
  url('#{$asset-path-font}/McGillSans-Medium.ttf') format('truetype');
  font-weight: normal;
  font-style: normal;
}

@font-face {
  font-family: 'McGillSans-Italic';
  src: url('#{$asset-path-font}/McGillSans-Italic.eot');
  src: url('#{$asset-path-font}/McGillSans-Italic.eot?#iefix') format('embedded-opentype'),
  url('#{$asset-path-font}/McGillSans-Italic.woff') format('woff'),
  url('#{$asset-path-font}/McGillSans-Italic.ttf') format('truetype');
  font-weight: normal;
  font-style: normal;
}

@font-face {
  font-family: 'McGillSerif-Regular';
  src: url('#{$asset-path-font}/McGillSerif-Regular.eot');
  src: url('#{$asset-path-font}/McGillSerif-Regular.eot?#iefix') format('embedded-opentype'),
  url('#{$asset-path-font}/McGillSerif-Regular.woff') format('woff'),
  url('#{$asset-path-font}/McGillSerif-Regular.ttf') format('truetype');
  font-weight: normal;
  font-style: normal;
}


@font-face {
  font-family: 'McGillSerif-Medium';
  src: url('#{$asset-path-font}/McGillSerif-Medium.eot');
  src: url('#{$asset-path-font}/McGillSerif-Medium.eot?#iefix') format('embedded-opentype'),
  url('#{$asset-path-font}/McGillSerif-Medium.woff') format('woff'),
  url('#{$asset-path-font}/McGillSerif-Medium.ttf') format('truetype');
  font-weight: normal;
  font-style: normal;
}

@font-face {
  font-family: 'McGillSerif-Italic';
  src: url('#{$asset-path-font}/McGillSerif-Italic.eot');
  src: url('#{$asset-path-font}/McGillSerif-Italic.eot?#iefix') format('embedded-opentype'),
  url('#{$asset-path-font}/McGillSerif-Italic.woff') format('woff'),
  url('#{$asset-path-font}/McGillSerif-Italic.ttf') format('truetype');
  font-weight: normal;
  font-style: normal;
}

// Variable to hold standard serif fonts, to be used in a font-stack.
$standard-serif: "MinionPro-Medium", "Minion Pro Medium", "Minion Pro", Century, Georgia, serif;

// Variable to hold standard serif fonts, to be used in a font-stack.
$standard-sans-serif: "Helvetica Neue-Medium", "Helvetica Neue Medium", "Helvetica Neue", Helvetica, Arial, sans-serif;

// Variable to hold McGill serif fonts.
$mcgill-standard-serif: 'McGillSerif-Regular';

// Variable to hold McGill medium serif fonts.
$mcgill-medium-serif: 'McGillSerif-Medium';

// Variable to hold McGill medium sans fonts.
$mcgill-medium-sans: 'McGillSans-Medium';

// Variable to hold McGill sans-serif fonts.
$mcgill-standard-sans-serif: 'McgillSans-Regular';

// McGill serif in italics .
$mcgill-serif-italic: 'McGillSerif-Italic';

// McGill sans-serif in italics.
$mcgill-sans-italic: 'McGillSans-Italic';

/*
 * McGill fonts with appropriate font-stacks.
 */

// Medium sans-serif.
$mcgill-medium-sans: $mcgill-medium-sans, $standard-sans-serif;

// Medium serif.
$mcgill-medium-serif : $mcgill-medium-serif, $standard-serif;

// Regular sans-serif.
$mcgill-regular-sans: $mcgill-standard-sans-serif, $standard-sans-serif;

// Regular serif.
$mcgill-regular-serif: $mcgill-standard-serif, $standard-serif;

/*
 * Supporting typographic property variables.
 */

// A nice line-height specifically for headers.
$heading-line-height: 1.3;
$header-padding: space.$padding-quarter;
$header-padding-sm: space.$padding-third;
$normal-weight: normal;

// Dynamic margins for headers.
@mixin header-margin-spacing() {
  margin: calc(2rem -  0.14285714em ) 0em 1rem;
  line-height: $heading-line-height;
}

@mixin header-padding($x-large: false) {
  @if $x-large {
    padding: $header-padding 0;
  } @else {
    padding: $header-padding 0 $header-padding-sm 0;
  }
}
